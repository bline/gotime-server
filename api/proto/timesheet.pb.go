// Code generated by protoc-gen-go. DO NOT EDIT.
// source: timesheet.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ClockRequest_EntryType int32

const (
	ClockRequest_Work  ClockRequest_EntryType = 0
	ClockRequest_Break ClockRequest_EntryType = 1
)

var ClockRequest_EntryType_name = map[int32]string{
	0: "Work",
	1: "Break",
}
var ClockRequest_EntryType_value = map[string]int32{
	"Work":  0,
	"Break": 1,
}

func (x ClockRequest_EntryType) String() string {
	return proto.EnumName(ClockRequest_EntryType_name, int32(x))
}
func (ClockRequest_EntryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type TSStatusResponse_Status int32

const (
	TSStatusResponse_ClockedOut TSStatusResponse_Status = 0
	TSStatusResponse_ClockedIn  TSStatusResponse_Status = 1
)

var TSStatusResponse_Status_name = map[int32]string{
	0: "ClockedOut",
	1: "ClockedIn",
}
var TSStatusResponse_Status_value = map[string]int32{
	"ClockedOut": 0,
	"ClockedIn":  1,
}

func (x TSStatusResponse_Status) String() string {
	return proto.EnumName(TSStatusResponse_Status_name, int32(x))
}
func (TSStatusResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

type TimeEntry_Status int32

const (
	TimeEntry_ClockedOut TimeEntry_Status = 0
	TimeEntry_ClockedIn  TimeEntry_Status = 1
)

var TimeEntry_Status_name = map[int32]string{
	0: "ClockedOut",
	1: "ClockedIn",
}
var TimeEntry_Status_value = map[string]int32{
	"ClockedOut": 0,
	"ClockedIn":  1,
}

func (x TimeEntry_Status) String() string {
	return proto.EnumName(TimeEntry_Status_name, int32(x))
}
func (TimeEntry_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

type ClockRequest struct {
	Type ClockRequest_EntryType `protobuf:"varint,1,opt,name=Type,enum=api.ClockRequest_EntryType" json:"Type,omitempty"`
}

func (m *ClockRequest) Reset()                    { *m = ClockRequest{} }
func (m *ClockRequest) String() string            { return proto.CompactTextString(m) }
func (*ClockRequest) ProtoMessage()               {}
func (*ClockRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ClockRequest) GetType() ClockRequest_EntryType {
	if m != nil {
		return m.Type
	}
	return ClockRequest_Work
}

type TimeSheetRequest struct {
	Options   *SearchOptions             `protobuf:"bytes,1,opt,name=Options" json:"Options,omitempty"`
	StartTime *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=StartTime" json:"StartTime,omitempty"`
	EndTime   *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=EndTime" json:"EndTime,omitempty"`
	// Types that are valid to be assigned to UserIdent:
	//	*TimeSheetRequest_Email
	//	*TimeSheetRequest_UserID
	UserIdent isTimeSheetRequest_UserIdent `protobuf_oneof:"UserIdent"`
}

func (m *TimeSheetRequest) Reset()                    { *m = TimeSheetRequest{} }
func (m *TimeSheetRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeSheetRequest) ProtoMessage()               {}
func (*TimeSheetRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isTimeSheetRequest_UserIdent interface {
	isTimeSheetRequest_UserIdent()
}

type TimeSheetRequest_Email struct {
	Email string `protobuf:"bytes,4,opt,name=Email,oneof"`
}
type TimeSheetRequest_UserID struct {
	UserID int64 `protobuf:"varint,5,opt,name=UserID,oneof"`
}

func (*TimeSheetRequest_Email) isTimeSheetRequest_UserIdent()  {}
func (*TimeSheetRequest_UserID) isTimeSheetRequest_UserIdent() {}

func (m *TimeSheetRequest) GetUserIdent() isTimeSheetRequest_UserIdent {
	if m != nil {
		return m.UserIdent
	}
	return nil
}

func (m *TimeSheetRequest) GetOptions() *SearchOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *TimeSheetRequest) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TimeSheetRequest) GetEndTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *TimeSheetRequest) GetEmail() string {
	if x, ok := m.GetUserIdent().(*TimeSheetRequest_Email); ok {
		return x.Email
	}
	return ""
}

func (m *TimeSheetRequest) GetUserID() int64 {
	if x, ok := m.GetUserIdent().(*TimeSheetRequest_UserID); ok {
		return x.UserID
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TimeSheetRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TimeSheetRequest_OneofMarshaler, _TimeSheetRequest_OneofUnmarshaler, _TimeSheetRequest_OneofSizer, []interface{}{
		(*TimeSheetRequest_Email)(nil),
		(*TimeSheetRequest_UserID)(nil),
	}
}

func _TimeSheetRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TimeSheetRequest)
	// UserIdent
	switch x := m.UserIdent.(type) {
	case *TimeSheetRequest_Email:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Email)
	case *TimeSheetRequest_UserID:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.UserID))
	case nil:
	default:
		return fmt.Errorf("TimeSheetRequest.UserIdent has unexpected type %T", x)
	}
	return nil
}

func _TimeSheetRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TimeSheetRequest)
	switch tag {
	case 4: // UserIdent.Email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.UserIdent = &TimeSheetRequest_Email{x}
		return true, err
	case 5: // UserIdent.UserID
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.UserIdent = &TimeSheetRequest_UserID{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TimeSheetRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TimeSheetRequest)
	// UserIdent
	switch x := m.UserIdent.(type) {
	case *TimeSheetRequest_Email:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Email)))
		n += len(x.Email)
	case *TimeSheetRequest_UserID:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.UserID))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TSStatusResponse struct {
	State      TSStatusResponse_Status    `protobuf:"varint,1,opt,name=State,enum=api.TSStatusResponse_Status" json:"State,omitempty"`
	Timestamp  *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	LastWorked *google_protobuf1.Duration `protobuf:"bytes,3,opt,name=LastWorked" json:"LastWorked,omitempty"`
}

func (m *TSStatusResponse) Reset()                    { *m = TSStatusResponse{} }
func (m *TSStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*TSStatusResponse) ProtoMessage()               {}
func (*TSStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *TSStatusResponse) GetState() TSStatusResponse_Status {
	if m != nil {
		return m.State
	}
	return TSStatusResponse_ClockedOut
}

func (m *TSStatusResponse) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TSStatusResponse) GetLastWorked() *google_protobuf1.Duration {
	if m != nil {
		return m.LastWorked
	}
	return nil
}

type TimeEntry struct {
	ID        int64                      `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID    string                     `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=Timestamp" json:"Timestamp,omitempty"`
	State     TimeEntry_Status           `protobuf:"varint,4,opt,name=State,enum=api.TimeEntry_Status" json:"State,omitempty"`
}

func (m *TimeEntry) Reset()                    { *m = TimeEntry{} }
func (m *TimeEntry) String() string            { return proto.CompactTextString(m) }
func (*TimeEntry) ProtoMessage()               {}
func (*TimeEntry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *TimeEntry) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TimeEntry) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *TimeEntry) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TimeEntry) GetState() TimeEntry_Status {
	if m != nil {
		return m.State
	}
	return TimeEntry_ClockedOut
}

func init() {
	proto.RegisterType((*ClockRequest)(nil), "api.ClockRequest")
	proto.RegisterType((*TimeSheetRequest)(nil), "api.TimeSheetRequest")
	proto.RegisterType((*TSStatusResponse)(nil), "api.TSStatusResponse")
	proto.RegisterType((*TimeEntry)(nil), "api.TimeEntry")
	proto.RegisterEnum("api.ClockRequest_EntryType", ClockRequest_EntryType_name, ClockRequest_EntryType_value)
	proto.RegisterEnum("api.TSStatusResponse_Status", TSStatusResponse_Status_name, TSStatusResponse_Status_value)
	proto.RegisterEnum("api.TimeEntry_Status", TimeEntry_Status_name, TimeEntry_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TimeSheet service

type TimeSheetClient interface {
	ClockIn(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ClockOut(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetCurrentStatus(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*TSStatusResponse, error)
	GetEntries(ctx context.Context, in *TimeSheetRequest, opts ...grpc.CallOption) (TimeSheet_GetEntriesClient, error)
}

type timeSheetClient struct {
	cc *grpc.ClientConn
}

func NewTimeSheetClient(cc *grpc.ClientConn) TimeSheetClient {
	return &timeSheetClient{cc}
}

func (c *timeSheetClient) ClockIn(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.TimeSheet/ClockIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSheetClient) ClockOut(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.TimeSheet/ClockOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSheetClient) GetCurrentStatus(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*TSStatusResponse, error) {
	out := new(TSStatusResponse)
	err := grpc.Invoke(ctx, "/api.TimeSheet/GetCurrentStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSheetClient) GetEntries(ctx context.Context, in *TimeSheetRequest, opts ...grpc.CallOption) (TimeSheet_GetEntriesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TimeSheet_serviceDesc.Streams[0], c.cc, "/api.TimeSheet/GetEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeSheetGetEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeSheet_GetEntriesClient interface {
	Recv() (*TimeEntry, error)
	grpc.ClientStream
}

type timeSheetGetEntriesClient struct {
	grpc.ClientStream
}

func (x *timeSheetGetEntriesClient) Recv() (*TimeEntry, error) {
	m := new(TimeEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TimeSheet service

type TimeSheetServer interface {
	ClockIn(context.Context, *ClockRequest) (*SimpleResponse, error)
	ClockOut(context.Context, *ClockRequest) (*SimpleResponse, error)
	GetCurrentStatus(context.Context, *ClockRequest) (*TSStatusResponse, error)
	GetEntries(*TimeSheetRequest, TimeSheet_GetEntriesServer) error
}

func RegisterTimeSheetServer(s *grpc.Server, srv TimeSheetServer) {
	s.RegisterService(&_TimeSheet_serviceDesc, srv)
}

func _TimeSheet_ClockIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSheetServer).ClockIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TimeSheet/ClockIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSheetServer).ClockIn(ctx, req.(*ClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSheet_ClockOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSheetServer).ClockOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TimeSheet/ClockOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSheetServer).ClockOut(ctx, req.(*ClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSheet_GetCurrentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSheetServer).GetCurrentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TimeSheet/GetCurrentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSheetServer).GetCurrentStatus(ctx, req.(*ClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSheet_GetEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimeSheetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeSheetServer).GetEntries(m, &timeSheetGetEntriesServer{stream})
}

type TimeSheet_GetEntriesServer interface {
	Send(*TimeEntry) error
	grpc.ServerStream
}

type timeSheetGetEntriesServer struct {
	grpc.ServerStream
}

func (x *timeSheetGetEntriesServer) Send(m *TimeEntry) error {
	return x.ServerStream.SendMsg(m)
}

var _TimeSheet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TimeSheet",
	HandlerType: (*TimeSheetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClockIn",
			Handler:    _TimeSheet_ClockIn_Handler,
		},
		{
			MethodName: "ClockOut",
			Handler:    _TimeSheet_ClockOut_Handler,
		},
		{
			MethodName: "GetCurrentStatus",
			Handler:    _TimeSheet_GetCurrentStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEntries",
			Handler:       _TimeSheet_GetEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "timesheet.proto",
}

func init() { proto.RegisterFile("timesheet.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x3a, 0x7f, 0xea, 0x69, 0x09, 0x66, 0x50, 0x2b, 0x63, 0x10, 0x44, 0xbe, 0x10,
	0x09, 0xe4, 0x40, 0x00, 0x09, 0x24, 0x4e, 0x6d, 0xa2, 0xd6, 0x12, 0x52, 0x24, 0x3b, 0x88, 0xf3,
	0x36, 0x1e, 0x5a, 0x2b, 0xf1, 0x1f, 0xd6, 0xeb, 0x43, 0x9f, 0x8f, 0x57, 0x41, 0xe2, 0xc8, 0x2b,
	0xa0, 0x5d, 0x7b, 0xd3, 0xa4, 0xad, 0x44, 0xb8, 0x79, 0xd6, 0xdf, 0x78, 0xbf, 0xdf, 0x37, 0x63,
	0x78, 0x28, 0x92, 0x94, 0xca, 0x2b, 0x22, 0xe1, 0x17, 0x3c, 0x17, 0x39, 0x9a, 0xac, 0x48, 0xdc,
	0xc3, 0x45, 0x9e, 0xa6, 0x79, 0x56, 0x1f, 0xb9, 0x2f, 0x2e, 0xf3, 0xfc, 0x72, 0x45, 0x23, 0x55,
	0x5d, 0x54, 0xdf, 0x47, 0xaa, 0x47, 0xb0, 0xb4, 0x68, 0x04, 0xcf, 0x6f, 0x0b, 0xe2, 0x8a, 0x33,
	0x91, 0xe8, 0x0f, 0x78, 0x0c, 0x0e, 0x4f, 0x57, 0xf9, 0x62, 0x19, 0xd2, 0x8f, 0x8a, 0x4a, 0x81,
	0x23, 0x68, 0xcf, 0xaf, 0x0b, 0x72, 0x8c, 0x81, 0x31, 0xec, 0x8f, 0x9f, 0xfa, 0xac, 0x48, 0xfc,
	0x4d, 0x81, 0x3f, 0xcd, 0x04, 0xbf, 0x96, 0x92, 0x50, 0x09, 0xbd, 0x01, 0x58, 0xeb, 0x23, 0xdc,
	0x87, 0xf6, 0xb7, 0x9c, 0x2f, 0xed, 0x16, 0x5a, 0xd0, 0x39, 0xe1, 0xc4, 0x96, 0xb6, 0xe1, 0xfd,
	0x31, 0xc0, 0x9e, 0x27, 0x29, 0x45, 0x12, 0x45, 0xdf, 0xf3, 0x1a, 0x7a, 0xb3, 0x42, 0xfa, 0x28,
	0xd5, 0x55, 0x07, 0x63, 0x54, 0x57, 0x45, 0xc4, 0xf8, 0xe2, 0xaa, 0x79, 0x13, 0x6a, 0x09, 0x7e,
	0x04, 0x2b, 0x12, 0x8c, 0x0b, 0xf9, 0x19, 0x67, 0x4f, 0xe9, 0x5d, 0xbf, 0x26, 0xf3, 0x35, 0x99,
	0x3f, 0xd7, 0xe8, 0xe1, 0x8d, 0x18, 0xdf, 0x43, 0x6f, 0x9a, 0xc5, 0xaa, 0xcf, 0xfc, 0x67, 0x9f,
	0x96, 0xe2, 0x31, 0x74, 0xa6, 0x29, 0x4b, 0x56, 0x4e, 0x7b, 0x60, 0x0c, 0xad, 0xf3, 0x56, 0x58,
	0x97, 0xe8, 0x40, 0xf7, 0x6b, 0x49, 0x3c, 0x98, 0x38, 0x9d, 0x81, 0x31, 0x34, 0xcf, 0x5b, 0x61,
	0x53, 0x9f, 0x1c, 0x80, 0xa5, 0x9e, 0x62, 0xca, 0x84, 0xf7, 0x4b, 0x12, 0x47, 0x91, 0x60, 0xa2,
	0x2a, 0x43, 0x2a, 0x8b, 0x3c, 0x2b, 0x09, 0xc7, 0xd0, 0x91, 0x27, 0x3a, 0xda, 0x67, 0x8a, 0xf7,
	0xb6, 0xca, 0x6f, 0xca, 0x5a, 0x2a, 0xb9, 0xd7, 0xee, 0x76, 0xe1, 0x5e, 0x3f, 0xe2, 0x27, 0x80,
	0x2f, 0xac, 0x14, 0x72, 0x1a, 0x14, 0x37, 0xe8, 0x4f, 0xee, 0xb4, 0x4e, 0x9a, 0x65, 0x08, 0x37,
	0xc4, 0xde, 0x4b, 0xe8, 0xd6, 0x2e, 0xb0, 0x0f, 0xa0, 0x66, 0x4f, 0xf1, 0xac, 0x12, 0x76, 0x0b,
	0x1f, 0x80, 0xd5, 0xd4, 0x41, 0x66, 0x1b, 0xde, 0x4f, 0xa3, 0xb6, 0xa7, 0xe6, 0x8f, 0x7d, 0xd8,
	0x0b, 0x26, 0x0a, 0xce, 0x0c, 0xf7, 0x82, 0x09, 0x1e, 0xaf, 0xb3, 0x92, 0xc6, 0x2d, 0x9d, 0xd4,
	0x36, 0x93, 0xf9, 0x3f, 0x4c, 0xaf, 0x74, 0x82, 0x6d, 0x95, 0xe0, 0x51, 0x9d, 0xa0, 0x36, 0xb0,
	0x1d, 0xdd, 0xce, 0x14, 0xe3, 0xdf, 0x0d, 0x85, 0x5a, 0x4f, 0x7c, 0x0b, 0x3d, 0xf5, 0x32, 0xc8,
	0xf0, 0xd1, 0x9d, 0xe5, 0x77, 0x1f, 0xd7, 0x4b, 0x9a, 0xa4, 0xc5, 0x8a, 0x36, 0x06, 0xbb, 0xaf,
	0x44, 0xb3, 0x4a, 0xec, 0xdc, 0xf3, 0x19, 0xec, 0x33, 0x12, 0xa7, 0x15, 0xe7, 0x94, 0x89, 0xc6,
	0xe7, 0x3d, 0xbd, 0x47, 0xf7, 0x2e, 0x09, 0x7e, 0x00, 0x38, 0x23, 0x21, 0xa9, 0x13, 0x2a, 0xf1,
	0x26, 0x87, 0xcd, 0x3f, 0xcc, 0xed, 0x6f, 0xc7, 0xf3, 0xc6, 0xb8, 0xe8, 0xaa, 0x78, 0xdf, 0xfd,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x73, 0x9b, 0x0b, 0xf2, 0x59, 0x04, 0x00, 0x00,
}
